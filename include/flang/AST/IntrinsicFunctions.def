//=== IntrinsicFunctions.def - Fortran Family Intrinsic function Database ===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines the Intrinsic function database.
//
//===----------------------------------------------------------------------===//

#ifndef NUM_ARGS_1
#define NUM_ARGS_1
#endif

#ifndef NUM_ARGS_2
#define NUM_ARGS_2
#endif

#ifndef NUM_ARGS_1_OR_2
#define NUM_ARGS_1_OR_2
#endif

#ifndef NUM_ARGS_2_OR_MORE
#define NUM_ARGS_2_OR_MORE
#endif

#ifndef INTRINSIC_FUNCTION
#define INTRINSIC_FUNCTION(NAME, NUMARGS, VERSION)
#endif

/// EXP -> EXP, DEXP
#define INTRINSIC_FUNCTION_ADD_D_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NUMARGS, VERSION)

/// EXP -> EXP, DEXP, CEXP
#define INTRINSIC_FUNCTION_ADD_DC_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(C##NAME, NUMARGS, VERSION)

/// EXP -> EXP, AEXP, DEXP, CEXP
#define INTRINSIC_FUNCTION_ADD_ADC_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(A##NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(C##NAME, NUMARGS, VERSION)

/// EXP -> EXP, AEXP, DEXP
#define INTRINSIC_FUNCTION_ADD_AD_PREFIX(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(A##NAME, NUMARGS, VERSION) \
  INTRINSIC_FUNCTION(D##NAME, NUMARGS, VERSION)

//
// Argument count flags allowed:
//   NUM_ARGS_1 - The function accepts only one argument.
//   NUM_ARGS_2 - The function accepts only two arguments.
//   NUM_ARGS_1_OR_2 - The function accepts only one or two arguments.
//   NUM_ARGS_2_OR_MORE - The function accepts two or more arguments.
//
// Version flags allowed:
//   FUNALL    - This is an intrinsic functions in all variants of Fortran.
//   FUNNOTF77 - This is an intrinsic functions  keyword for all variants of Fortran except 77.
//   FUNF77    - This is an intrinsic functions  keyword for Fortran 77.
//   FUNF90    - This is an intrinsic functions  keyword for Fortran 90.
//   FUNF95    - This is an intrinsic functions  keyword for Fortran 90/95.
//   FUNF2003  - This is an intrinsic functions  keyword for Fortran 2003.
//   FUNF2008  - This is an intrinsic functions  keyword for Fortran 2003/2008.
//

// conversion functions
INTRINSIC_FUNCTION(INT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(IFIX, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(IDINT, NUM_ARGS_1, FUNALL)

INTRINSIC_FUNCTION(REAL, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(FLOAT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(SNGL, NUM_ARGS_1, FUNALL)

INTRINSIC_FUNCTION(DBLE, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(CMPLX, NUM_ARGS_1_OR_2, FUNALL)
INTRINSIC_FUNCTION(DCMPLX, NUM_ARGS_1_OR_2, FUNALL) // FIXME: is that a standard overload?
INTRINSIC_FUNCTION(ICHAR, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(CHAR, NUM_ARGS_1, FUNALL)

// truncation of real
INTRINSIC_FUNCTION(AINT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(DINT, NUM_ARGS_1, FUNALL)

// nearest whole number
INTRINSIC_FUNCTION(ANINT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(DNINT, NUM_ARGS_1, FUNALL)

// Nearest integer
INTRINSIC_FUNCTION(NINT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(IDNINT, NUM_ARGS_1, FUNALL)

// Absolute value
INTRINSIC_FUNCTION(ABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(IABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(DABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(CABS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(CDABS, NUM_ARGS_1, FUNALL) // FIXME: is that a standard overload?

// Remainder
INTRINSIC_FUNCTION(MOD, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(AMOD, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(DMOD, NUM_ARGS_2, FUNALL)

// Sign
INTRINSIC_FUNCTION(SIGN, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(ISIGN, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(DSIGN, NUM_ARGS_2, FUNALL)

// Positive difference
INTRINSIC_FUNCTION(DIM, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(IDIM, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(DDIM, NUM_ARGS_2, FUNALL)

// real * real => double prec
INTRINSIC_FUNCTION(DPROD, NUM_ARGS_2, FUNALL)

INTRINSIC_FUNCTION(MAX, NUM_ARGS_2_OR_MORE, FUNALL)
INTRINSIC_FUNCTION(MAX0, NUM_ARGS_2_OR_MORE, FUNALL) //int->int
INTRINSIC_FUNCTION(AMAX1, NUM_ARGS_2_OR_MORE, FUNALL) //real->real
INTRINSIC_FUNCTION(DMAX1, NUM_ARGS_2_OR_MORE, FUNALL) //double->double
INTRINSIC_FUNCTION(AMAX0, NUM_ARGS_2_OR_MORE, FUNALL) //int->real
INTRINSIC_FUNCTION(MAX1, NUM_ARGS_2_OR_MORE, FUNALL) //real->int

INTRINSIC_FUNCTION(MIN, NUM_ARGS_2_OR_MORE, FUNALL)
INTRINSIC_FUNCTION(MIN0, NUM_ARGS_2_OR_MORE, FUNALL) //int->int
INTRINSIC_FUNCTION(AMIN1, NUM_ARGS_2_OR_MORE, FUNALL) //real->real
INTRINSIC_FUNCTION(DMIN1, NUM_ARGS_2_OR_MORE, FUNALL) //double->double
INTRINSIC_FUNCTION(AMIN0, NUM_ARGS_2_OR_MORE, FUNALL) //int->real
INTRINSIC_FUNCTION(MIN1, NUM_ARGS_2_OR_MORE, FUNALL) //real->int

INTRINSIC_FUNCTION(LEN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION(LEN_TRIM, NUM_ARGS_1, FUNNOTF77)
INTRINSIC_FUNCTION(INDEX, NUM_ARGS_2, FUNALL) // location of substring a in b
INTRINSIC_FUNCTION(AIMAG, NUM_ARGS_1, FUNALL) // imaginary part of complex
INTRINSIC_FUNCTION(DIMAG, NUM_ARGS_1, FUNALL) // FIXME: is that a standard overload?
INTRINSIC_FUNCTION(CONJG, NUM_ARGS_1, FUNALL) // conjugate of complex
INTRINSIC_FUNCTION(DCONJG, NUM_ARGS_1_OR_2, FUNALL) // FIXME: is that a standard overload?

// maths
INTRINSIC_FUNCTION_ADD_DC_PREFIX(SQRT, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_DC_PREFIX(EXP, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_ADC_PREFIX(LOG, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_AD_PREFIX(LOG10, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_DC_PREFIX(SIN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_DC_PREFIX(COS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(TAN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ASIN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ACOS, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ATAN, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(ATAN2, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(SINH, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(COSH, NUM_ARGS_1, FUNALL)
INTRINSIC_FUNCTION_ADD_D_PREFIX(TANH, NUM_ARGS_1, FUNALL)

// lexical comparison
INTRINSIC_FUNCTION(LGE, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(LGT, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(LLE, NUM_ARGS_2, FUNALL)
INTRINSIC_FUNCTION(LLT, NUM_ARGS_2, FUNALL)

#undef INTRINSIC_FUNCTION_ADD_D_PREFIX
#undef INTRINSIC_FUNCTION_ADD_DC_PREFIX
#undef INTRINSIC_FUNCTION_ADD_AD_PREFIX
#undef INTRINSIC_FUNCTION_ADD_ADC_PREFIX
#undef INTRINSIC_FUNCTION

#undef NUM_ARGS_2_OR_MORE
#undef NUM_ARGS_1_OR_2
#undef NUM_ARGS_2
#undef NUM_ARGS_1
