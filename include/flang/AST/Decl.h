//===-- Decl.h - Declarations -----------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// Classes for Fortran declarations.
//
//===----------------------------------------------------------------------===//

#ifndef FORTRAN_AST_DECL_H__
#define FORTRAN_AST_DECL_H__

#include "flang/AST/DeclarationName.h"
#include "flang/AST/Type.h"
#include "flang/Basic/IdentifierTable.h"
#include "flang/Basic/SourceLocation.h"
#include "llvm/ADT/FoldingSet.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/SMLoc.h"
#include "llvm/Support/PrettyStackTrace.h"

namespace llvm {
  class SourceMgr;
}

namespace fortran {

class ASTContext;
class DeclSpec;
class IdentifierInfo;
class StoredDeclsMap;

// Decls
class DeclContext;
class TranslationUnitDecl;
class NamedDecl;
class TypedDecl;
class TagDecl;
class EnumDecl;
class RecordDecl;
class ValueDecl;
class EnumConstantDecl;
class DeclaratorDecl;
class FunctionDecl;
class FieldDecl;
class VarDecl;
class ParmVarDecl;
class FileScopeAsmDecl;

} // end fortran namespace

namespace llvm {

// DeclContext* is only 4-byte aligned on 32-bit systems.
template<>
  class PointerLikeTypeTraits<fortran::DeclContext*> {
  typedef fortran::DeclContext* PT;
public:
  static inline void *getAsVoidPointer(PT P) { return P; }
  static inline PT getFromVoidPointer(void *P) {
    return static_cast<PT>(P);
  }
  enum { NumLowBitsAvailable = 2 };
};

} // end llvm namespace

namespace fortran {

//===----------------------------------------------------------------------===//
/// Decl - Base class for declarations.
///
class Decl {
public:
  /// \brief Lists the kind of concrete classes of Decl.
  enum Kind {
#define DECL(DERIVED, BASE) DERIVED,
#define ABSTRACT_DECL(DECL)
#define DECL_RANGE(BASE, START, END) \
        first##BASE = START, last##BASE = END,
#define LAST_DECL_RANGE(BASE, START, END) \
        first##BASE = START, last##BASE = END
#include "flang/AST/DeclNodes.inc"
  };

private:
  friend class DeclContext;

  /// NextDeclInContext - The next declaration within the same lexical
  /// DeclContext. These pointers form the linked list that is traversed via
  /// DeclContext's decls_begin()/decls_end().
  Decl *NextDeclInContext;

  /// DeclCtx - The declaration context.
  DeclContext *DeclCtx;

  /// Loc - The location of this decl.
  llvm::SMLoc Loc;

  /// DeclKind - The class of decl this is.
  unsigned DeclKind    : 8;

  /// InvalidDecl - This indicates a semantic error occurred.
  unsigned InvalidDecl : 1;

  /// HasAttrs - This indicates whether the decl has attributes or not.
  unsigned HasAttrs    : 1;

  /// Implicit - Whether this declaration was implicitly generated by
  /// the implementation rather than explicitly written by the user.
  unsigned Implicit    : 1;

protected:

  Decl(Kind DK, DeclContext *DC, llvm::SMLoc L)
    : NextDeclInContext(0), DeclCtx(DC), Loc(L), DeclKind(DK),
      InvalidDecl(false), HasAttrs(false), Implicit(false) {}

  virtual ~Decl();

public:
  /// \brief Source range that this declaration covers.
  virtual SourceRange getSourceRange() const {
    return SourceRange(getLocation(), getLocation());
  }
  llvm::SMLoc getLocStart() const { return getSourceRange().getBegin(); }
  llvm::SMLoc getLocEnd() const { return getSourceRange().getEnd(); }

  llvm::SMLoc getLocation() const { return Loc; }
  void setLocation(llvm::SMLoc L) { Loc = L; }

  Kind getKind() const { return static_cast<Kind>(DeclKind); }

  Decl *getNextDeclInContext() { return NextDeclInContext; }
  const Decl *getNextDeclInContext() const { return NextDeclInContext; }

  DeclContext *getDeclContext() { return DeclCtx; }
  const DeclContext *getDeclContext() const { return DeclCtx; }
  void setDeclContext(DeclContext *DC) { DeclCtx = DC; }

  /// setInvalidDecl - Indicates the Decl had a semantic error. This
  /// allows for graceful error recovery.
  void setInvalidDecl(bool Invalid = true);
  bool isInvalidDecl() const { return (bool) InvalidDecl; }

  /// isImplicit - Indicates whether the declaration was implicitly
  /// generated by the implementation. If false, this declaration
  /// was written explicitly in the source code.
  bool isImplicit() const { return Implicit; }
  void setImplicit(bool I = true) { Implicit = I; }

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *) { return true; }
  static DeclContext *castToDeclContext(const Decl *);
  static Decl *castFromDeclContext(const DeclContext *);
};

/// PrettyStackTraceDecl - If a crash occurs, indicate that it happened when
/// doing something to a specific decl.
class PrettyStackTraceDecl : public llvm::PrettyStackTraceEntry {
  const Decl *TheDecl;
  llvm::SMLoc Loc;
  llvm::SourceMgr &SM;
  const char *Message;
public:
  PrettyStackTraceDecl(const Decl *theDecl, llvm::SMLoc L,
                       llvm::SourceMgr &sm, const char *Msg)
    : TheDecl(theDecl), Loc(L), SM(sm), Message(Msg) {}

  virtual void print(raw_ostream &OS) const;
};

/// DeclContext - This is used only as base class of specific decl types that
/// can act as declaration contexts. These decls are (only the top classes
/// that directly derive from DeclContext are mentioned, not their subclasses):
///
///   TranslationUnitDecl
///   FunctionDecl
///   TagDecl
///
class DeclContext {
  /// DeclKind - This indicates which class this is.
  unsigned DeclKind : 8;

  /// \brief Pointer to the data structure used to lookup declarations within
  /// this context.
  mutable StoredDeclsMap *LookupPtr;
protected:
  /// FirstDecl - The first declaration stored within this declaration
  /// context.
  mutable Decl *FirstDecl;

  /// LastDecl - The last declaration stored within this declaration
  /// context.
  mutable Decl *LastDecl;

  DeclContext(Decl::Kind K)
    : DeclKind(K), LookupPtr(0), FirstDecl(0), LastDecl(0) {}
public:
  ~DeclContext();

  Decl::Kind getDeclKind() const {
    return static_cast<Decl::Kind>(DeclKind);
  }

  /// \brief Retrieve the internal representation of the lookup structure.
  StoredDeclsMap *getLookupPtr() const { return LookupPtr; }

  /// getPrimaryContext - There may be many different declarations of the same
  /// entity (including forward declarations of classes, multiple definitions of
  /// namespaces, etc.), each with a different set of declarations. This routine
  /// returns the "primary" DeclContext structure, which will contain the
  /// information needed to perform name lookup into this context.
  DeclContext *getPrimaryContext();
  const DeclContext *getPrimaryContext() const {
    return const_cast<DeclContext*>(this)->getPrimaryContext();
  }

  /// decl_iterator - Iterates through the declarations stored within this
  /// context.
  class decl_iterator {
    /// Current - The current declaration.
    Decl *Current;

  public:
    typedef Decl*                     value_type;
    typedef Decl*                     reference;
    typedef Decl*                     pointer;
    typedef std::forward_iterator_tag iterator_category;
    typedef std::ptrdiff_t            difference_type;

    decl_iterator() : Current(0) { }
    explicit decl_iterator(Decl *C) : Current(C) { }

    reference operator*() const { return Current; }
    pointer operator->() const { return Current; }

    decl_iterator& operator++() {
      Current = Current->getNextDeclInContext();
      return *this;
    }

    decl_iterator operator++(int) {
      decl_iterator tmp(*this);
      ++(*this);
      return tmp;
    }

    friend bool operator==(decl_iterator x, decl_iterator y) {
      return x.Current == y.Current;
    }
    friend bool operator!=(decl_iterator x, decl_iterator y) {
      return x.Current != y.Current;
    }
  };

  /// decls_begin/decls_end - Iterate over the declarations stored in this
  /// context.
  decl_iterator decls_begin() const;
  decl_iterator decls_end() const;
  bool decls_empty() const;

  /// @brief Add the declaration D into this context.
  ///
  /// This routine should be invoked when the declaration D has first been
  /// declared, to place D into the context where it was (lexically)
  /// defined. Every declaration must be added to one (and only one!) context,
  /// where it can be visited via [decls_begin(), decls_end()). Once a
  /// declaration has been added to its lexical context, the corresponding
  /// DeclContext owns the declaration.
  ///
  /// If D is also a NamedDecl, it will be made visible within its semantic
  /// context via makeDeclVisibleInContext.
  void addDecl(Decl *D);

  /// @brief Makes a declaration visible within this context.
  ///
  /// This routine makes the declaration D visible to name lookup within this
  /// context and, if this is a transparent context, within its parent contexts
  /// up to the first enclosing non-transparent context. Making a declaration
  /// visible within a context does not transfer ownership of a declaration, and
  /// a declaration can be visible in many contexts that aren't its lexical
  /// context.
  void makeDeclVisibleInContext(NamedDecl *D);

  static bool classof(const Decl *D);
  static bool classof(const DeclContext *D) { return true; }
#define DECL(NAME, BASE)
#define DECL_CONTEXT(NAME) \
  static bool classof(const NAME##Decl *D) { return true; }
#include "flang/AST/DeclNodes.inc"

private:
  void makeDeclVisibleInContextImpl(NamedDecl *D);
};

/// TranslationUnitDecl - The top declaration context.
class TranslationUnitDecl : public Decl, public DeclContext {
  ASTContext &Ctx;

  explicit TranslationUnitDecl(ASTContext &ctx)
    : Decl(TranslationUnit, 0, llvm::SMLoc()),
      DeclContext(TranslationUnit), Ctx(ctx) {}
public:
  ASTContext &getASTContext() const { return Ctx; }

  static TranslationUnitDecl *Create(ASTContext &C);

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const TranslationUnitDecl *D) { return true; }
  static bool classofKind(Kind K) { return K == TranslationUnit; }
  static DeclContext *castToDeclContext(const TranslationUnitDecl *D) {
    return static_cast<DeclContext*>(const_cast<TranslationUnitDecl*>(D));
  }
  static TranslationUnitDecl *castFromDeclContext(const DeclContext *DC) {
    return static_cast<TranslationUnitDecl*>(const_cast<DeclContext*>(DC));
  }
};

/// NamedDecl - This represents a decl with a name.
class NamedDecl : public Decl {
  /// Name - The name of this declaration, which is typically a normal
  /// identifier.
  DeclarationName Name;
protected:
  NamedDecl(Kind DK, DeclContext *DC, llvm::SMLoc L, DeclarationName N)
    : Decl(DK, DC, L), Name(N) {}
public:
  /// getIdentifier - Get the identifier that names this declaration, if there
  /// is one.
  IdentifierInfo *getIdentifier() const { return Name.getAsIdentifierInfo(); }

  /// getName - Get the name of identifier for this declaration as a StringRef.
  /// This requires that the declaration have a name and that it be a simple
  /// identifier.
  llvm::StringRef getName() const {
    assert(Name.isIdentifier() && "Name is not a simple identifier");
    return getIdentifier() ? getIdentifier()->getName() : "";
  }

  /// getDeclName - Get the actual, stored name of the declaration.
  DeclarationName getDeclName() const { return Name; }

  /// \brief Set the name of this declaration.
  void setDeclName(DeclarationName N) { Name = N; }

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const NamedDecl *D) { return true; }
  static bool classofKind(Kind K) { return K >= firstNamed && K <= lastNamed; }
};

/// TypeDecl - Represents a declaration of a type.
class TypeDecl : public NamedDecl {
  /// TypeForDecl - This indicates the Type object that represents this
  /// TypeDecl. It is a cache maintained by ASTContext::getTagDeclType.
  mutable const Type *TypeForDecl;

  /// LocStart - The start of the source range for this declaration.
  llvm::SMLoc LocStart;

  friend class ASTContext;
  friend class DeclContext;
  friend class TagDecl;
  friend class TagType;
protected:
  TypeDecl(Kind DK, DeclContext *DC, llvm::SMLoc L, IdentifierInfo *Id,
           llvm::SMLoc StartL = llvm::SMLoc())
    : NamedDecl(DK, DC, L, Id), TypeForDecl(0), LocStart(StartL) {}

public:
  // Low-level accessor
  const Type *getTypeForDecl() const { return TypeForDecl; }
  void setTypeForDecl(const Type *TD) { TypeForDecl = TD; }

  llvm::SMLoc getLocStart() const { return LocStart; }
  void setLocStart(llvm::SMLoc L) { LocStart = L; }

  virtual SourceRange getSourceRange() const {
    if (LocStart.isValid())
      return SourceRange(LocStart, getLocation());
    else
      return SourceRange(getLocation());
  }

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const TypeDecl *D) { return true; }
  static bool classofKind(Kind K) { return K >= firstType && K <= lastType; }
};

/// TagDecl - Represents the declaration of a struct/union/class/enum.
class TagDecl : public TypeDecl, public DeclContext {
public:
  // This is really ugly.
  typedef TagTypeKind TagKind;

private:
  // FIXME: This can be packed into the bitfields in Decl.
  /// TagDeclKind - The TagKind enum.
  unsigned TagDeclKind : 2;

  /// IsDefinition - True if this is a definition ("struct foo {};"), false if
  /// it is a declaration ("struct foo;").
  bool IsDefinition : 1;

  /// IsBeingDefined - True if this is currently being defined.
  bool IsBeingDefined : 1;

  /// IsEmbeddedInDeclarator - True if this tag declaration is "embedded" (i.e.,
  /// defined or declared for the very first time) in the syntax of a
  /// declarator.
  bool IsEmbeddedInDeclarator : 1;

protected:
  // These are used by (and only defined for) EnumDecl.
  unsigned NumPositiveBits : 8;
  unsigned NumNegativeBits : 8;

  TagDecl(Kind DK, TagKind TK, DeclContext *DC, llvm::SMLoc L,
          IdentifierInfo *Id, TagDecl *PrevDecl, llvm::SMLoc StartL)
    : TypeDecl(DK, DC, L, Id, StartL), DeclContext(DK) {
    assert((DK != Enum || TK == TTK_Enum) &&
           "EnumDecl not matched with TTK_Enum");
    TagDeclKind = TK;
    IsDefinition = false;
    IsBeingDefined = false;
    IsEmbeddedInDeclarator = false;
  }

  /// @brief Completes the definition of this tag declaration.
  ///
  /// This is a helper function for derived classes.
  void completeDefinition();    
    
public:
  /// getInnerLocStart - Return SMLoc representing start of source range
  /// ignoring outer template declarations.
  llvm::SMLoc getInnerLocStart() const { return getLocStart(); }

  /// getOuterLocStart - Return SMLoc representing start of source range taking
  /// into account any outer template declarations.
  llvm::SMLoc getOuterLocStart() const;
  virtual SourceRange getSourceRange() const;

  virtual TagDecl* getCanonicalDecl();
  const TagDecl* getCanonicalDecl() const {
    return const_cast<TagDecl*>(this)->getCanonicalDecl();
  }

  /// isThisDeclarationADefinition() - Return true if this declaration
  /// defines the type.  Provided for consistency.
  bool isThisDeclarationADefinition() const {
    return isDefinition();
  }

  /// isDefinition - Return true if this decl has its body specified.
  bool isDefinition() const {
    return IsDefinition;
  }

  /// isBeingDefined - Return true if this decl is currently being defined.
  bool isBeingDefined() const {
    return IsBeingDefined;
  }

  bool isEmbeddedInDeclarator() const {
    return IsEmbeddedInDeclarator;
  }
  void setEmbeddedInDeclarator(bool isInDeclarator) {
    IsEmbeddedInDeclarator = isInDeclarator;
  }

  /// @brief Starts the definition of this tag declaration.
  ///
  /// This method should be invoked at the beginning of the definition of this
  /// tag declaration. It will set the tag type into a state where it is in the
  /// process of being defined.
  void startDefinition();

  /// getDefinition - Returns the TagDecl that actually defines this
  /// struct/union/class/enum.  When determining whether or not a
  /// struct/union/class/enum is completely defined, one should use this method
  /// as opposed to 'isDefinition'.  'isDefinition' indicates whether or not a
  /// specific TagDecl is defining declaration, not whether or not the
  /// struct/union/class/enum type is defined.  This method returns NULL if
  /// there is no TagDecl that defines the struct/union/class/enum.
  TagDecl* getDefinition() const;

  void setDefinition(bool V) { IsDefinition = V; }

  TagKind getTagKind() const {
    return TagKind(TagDeclKind);
  }

  void setTagKind(TagKind TK) { TagDeclKind = TK; }

  bool isStruct() const { return getTagKind() == TTK_Struct; }
  bool isEnum()   const { return getTagKind() == TTK_Enum; }

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const TagDecl *D) { return true; }
  static bool classofKind(Kind K) { return K >= firstTag && K <= lastTag; }

  static DeclContext *castToDeclContext(const TagDecl *D) {
    return static_cast<DeclContext *>(const_cast<TagDecl*>(D));
  }
  static TagDecl *castFromDeclContext(const DeclContext *DC) {
    return static_cast<TagDecl *>(const_cast<DeclContext*>(DC));
  }
};

/// EnumDecl - Represents an enum.  As an extension, we allow forward-declared
/// enums.
class EnumDecl : public TagDecl {
  EnumDecl(DeclContext *DC, llvm::SMLoc StartLoc, llvm::SMLoc IdLoc,
           IdentifierInfo *Id, EnumDecl *PrevDecl, bool Fixed)
    : TagDecl(Enum, TTK_Enum, DC, IdLoc, Id, PrevDecl, StartLoc) {
  }

public:
  EnumDecl *getCanonicalDecl() {
    return cast<EnumDecl>(TagDecl::getCanonicalDecl());
  }
  const EnumDecl *getCanonicalDecl() const {
    return cast<EnumDecl>(TagDecl::getCanonicalDecl());
  }

  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const EnumDecl *D) { return true; }
  static bool classofKind(Kind K) { return K == Enum; }
};

/// RecordDecl - Represents a struct/union/class.  For example:
///   struct X;                  // Forward declaration, no "body".
///   union Y { int A, B; };     // Has body with members A and B (FieldDecls).
/// This decl will be marked invalid if *any* members are invalid.
///
class RecordDecl : public TagDecl {
protected:
  RecordDecl(Kind DK, TagKind TK, DeclContext *DC,
             llvm::SMLoc StartLoc, llvm::SMLoc IdLoc,
             IdentifierInfo *Id, RecordDecl *PrevDecl);
public:

  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const RecordDecl *D) { return true; }
  static bool classofKind(Kind K) { return K == Record; }
};

/// ValueDecl - Represent the declaration of a variable (in which case it is an
/// lvalue), a function (in which case it is a function designator), or an enum
/// constant.
class ValueDecl : public NamedDecl {
  QualType DeclType;
protected:
  ValueDecl(Kind DK, DeclContext *DC, llvm::SMLoc L,
            DeclarationName N, QualType T)
    : NamedDecl(DK, DC, L, N), DeclType(T) {}
public:
  QualType getType() const { return DeclType; }
  void setType(QualType newType) { DeclType = newType; }

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const ValueDecl *D) { return true; }
  static bool classofKind(Kind K) { return K >= firstValue && K <= lastValue; }
};

/// EnumConstantDecl - An instance of this object exists for each enum constant
/// that is defined.  For example, in "enum X {a,b}", each of a/b are
/// EnumConstantDecl's, X is an instance of EnumDecl, and the type of a/b is a
/// TagType for the X EnumDecl.
class EnumConstantDecl : public ValueDecl {
protected:
  EnumConstantDecl(DeclContext *DC, llvm::SMLoc L,
                   IdentifierInfo *Id, QualType T /*, Expr *E,
                                                    const llvm::APSInt &V */)
    : ValueDecl(EnumConstant, DC, L, Id, T) {}
public:
  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const EnumConstantDecl *D) { return true; }
  static bool classofKind(Kind K) { return K == EnumConstant; }
};

/// \brief Represents a ValueDecl that came out of a declarator.
/// Contains type source information through TypeSourceInfo.
class DeclaratorDecl : public ValueDecl {
protected:
  DeclaratorDecl(Kind DK, DeclContext *DC, llvm::SMLoc L,
                 DeclarationName N, QualType T, /* TypeSourceInfo *TInfo, */
                 llvm::SMLoc StartL)
    : ValueDecl(DK, DC, L, N, T) /*, DeclInfo(TInfo), InnerLocStart(StartL) */ {
  }
public:
  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const DeclaratorDecl *D) { return true; }
  static bool classofKind(Kind K) {
    return K >= firstDeclarator && K <= lastDeclarator;
  }
};

class FunctionDecl : public DeclaratorDecl, public DeclContext {
protected:
  FunctionDecl(Kind DK, DeclContext *DC, llvm::SMLoc StartLoc,
               const DeclarationNameInfo &NameInfo,
               QualType T /*, TypeSourceInfo *TInfo, */)
    : DeclaratorDecl(DK, DC, NameInfo.getLoc(), NameInfo.getName(), T, /*TInfo, */
                     StartLoc),
      DeclContext(DK) {
  }
public:

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const FunctionDecl *D) { return true; }
  static bool classofKind(Kind K) { return K == Function; }
  static DeclContext *castToDeclContext(const FunctionDecl *D) {
    return static_cast<DeclContext *>(const_cast<FunctionDecl*>(D));
  }
  static FunctionDecl *castFromDeclContext(const DeclContext *DC) {
    return static_cast<FunctionDecl *>(const_cast<DeclContext*>(DC));
  }
};

/// FieldDecl - An instance of this class is created by Sema::ActOnField to
/// represent a member of a struct/union/class.
class FieldDecl : public DeclaratorDecl {
protected:
  FieldDecl(Kind DK, DeclContext *DC, llvm::SMLoc StartLoc,
            llvm::SMLoc IdLoc, IdentifierInfo *Id,
            QualType T /*, TypeSourceInfo *TInfo, Expr *BW, bool Mutable,
                         bool HasInit */)
    : DeclaratorDecl(DK, DC, IdLoc, Id, T, /*TInfo,*/ StartLoc) {}
public:
  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const FieldDecl *D) { return true; }
  static bool classofKind(Kind K) { return K == Field; }
};

/// VarDecl - An instance of this class is created to represent a variable
/// declaration or definition.
#if 0
// FIXME:
class VarDecl : public DeclaratorDecl {
#endif
class VarDecl : public DeclaratorDecl, public llvm::FoldingSetNode {
  const DeclSpec *DS;

  friend class ASTContext;  // ASTContext creates these.
public:
  VarDecl(const IdentifierInfo *Info)
    // FIXME:
    : DeclaratorDecl(Var, 0, llvm::SMLoc(), Info, QualType(), llvm::SMLoc()),
      DS(0)
  {}
  VarDecl(llvm::SMLoc L, const DeclSpec *dts, const IdentifierInfo *Info)
    // FIXME:
    : DeclaratorDecl(Var, 0, L, Info, QualType(), llvm::SMLoc()),
      DS(dts)
  {}

  const DeclSpec *getDeclSpec() const { return DS; }
  void setDeclSpec(const DeclSpec *Val) { DS = Val; }

  /// isImplicitlyDefined - A variable which isn't defined and there isn't an
  /// "implicit none" statement has a default type of REAL.
  bool isImplicitlyDefined() const { return DS == 0; }

  void Profile(llvm::FoldingSetNodeID &ID) {
    Profile(ID, getIdentifier());
  }
  static void Profile(llvm::FoldingSetNodeID &ID, const IdentifierInfo *Info) {
    ID.AddPointer(Info);
  }

  // Implement isa/cast/dyncast/etc.
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const VarDecl *D) { return true; }
  static bool classofKind(Kind K) { return K >= firstVar && K <= lastVar; }
};

class FileScopeAsmDecl : public Decl {
  FileScopeAsmDecl(DeclContext *DC, /*StringLiteral *asmstring,*/
                   llvm::SMLoc StartL, llvm::SMLoc EndL)
    : Decl(FileScopeAsm, DC, StartL) {}
public:
  static bool classof(const Decl *D) { return classofKind(D->getKind()); }
  static bool classof(const FileScopeAsmDecl *D) { return true; }
  static bool classofKind(Kind K) { return K == FileScopeAsm; }
};

static inline llvm::raw_ostream &operator<<(llvm::raw_ostream &O,
                                            const VarDecl &V) {
  return O << V.getIdentifier()->getName();
}

} // end fortran namespace

#endif // FORTRAN_AST_DECL_H__
